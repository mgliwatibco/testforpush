/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pw.sherlock.UI.appnode;

import com.pw.sherlock.OshiImpls.OshiMiscFuncs;
import com.pw.sherlock.UI.Home;
import com.pw.sherlock.utils.SherlockUtils;
import java.time.Duration;
import java.time.Instant;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultMutableTreeNode;
import org.apache.log4j.Logger;

/**
 *
 * @author pwankhed
 */

public class NodeMon_OsgiConsole extends javax.swing.JPanel {

	OshiMiscFuncs oshiObj;
	private final Logger AgentMonHealthCheckTab = Logger.getLogger(NodeMon_OsgiConsole.class);
	SherlockUtils utilsObj = new SherlockUtils();
	String Domain, appSpace, appNode, nodePort;
	Instant start, end;
	long responseTime;
	Timer timer;

	public NodeMon_OsgiConsole(String domainName, String appspaceName, String appnodeName, String httpPort) {
		Domain = domainName;
		appSpace = appspaceName;
		appNode = appnodeName;
		nodePort = httpPort;
		initComponents();

		try {

			for (int i = 0; i < OsgiCmdTree.getRowCount(); i++) {
				OsgiCmdTree.expandRow(i);
			}

			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					osgiResponseTextArea.setEditable(false);
					infoLbl1.setText("<html>OSGi Interface for an appnode. OSGi commands are useful to gather data about running AppNodes, applications "
							+ "& troubleshooting the runtime issues. Requests and response are managed over HTTP transport</html>");
					infoLbl1.setSize(infoLbl1.getPreferredSize());
				}
			});
		} catch (Exception ex) {
			AgentMonHealthCheckTab.error("Exception occured while reading the response requested by 'NodeMon_OsgiConsole()"
					+ "'. Exception details are: " + ex.getMessage());
		}
	}

	private void sendCustomOsgiRequest() {
		try {
			osgiResponseTextArea.setEditable(false);
			DefaultCaret caret = (DefaultCaret) osgiResponseTextArea.getCaret();
			caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
			osgiResponseTextArea.getCaret().setVisible(true);
			osgiResponseTextArea.getCaret().setSelectionVisible(true);

			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					start = Instant.now();
					String url = "http://" + Home.master_agentHostName.trim() + ":" + nodePort.trim() + "/bw/framework.json/osgi?command=" + osgiCmdTF.getText().trim();
					String healthResponse = utilsObj.processOSGiCommands(url, "sendCustomOsgiRequest");
					end = Instant.now();

					if (healthResponse.toString().equals("Error")) {
						responseStatus.setText("<html><b>Response status:</b> " + "Error");
						osgiResponseTextArea.setText(healthResponse.toString() + " - Exception occured while processing the HTTP request for OSGI command, please check Sherlock logs for more details");
					} else {
						responseStatus.setText("<html><b>Response status:</b> " + "Success");
						if (retainOp.isSelected()) {
							osgiResponseTextArea.append("Output of '" + osgiCmdTF.getText() + "', executed on "
									+ java.util.Calendar.getInstance().getTime().toString() + "\n\n" + healthResponse.toString() + "\n\n");
						} else {
							osgiResponseTextArea.setText("Output of '" + osgiCmdTF.getText() + "', executed on "
									+ java.util.Calendar.getInstance().getTime().toString() + "\n" + healthResponse.toString());
						}
					}

					responseTime = Duration.between(start, end).toMillis();
					responseTimeLbl.setText("<html><b>Response time:</b> " + responseTime + " ms.</html>");
				}
			});

		} catch (Exception ex) {
			AgentMonHealthCheckTab.error("Exception occured while processing 'sendHealthCheckRequest'"
					+ "'. Exception details are: " + ex.getMessage());
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        closeTdTab = new javax.swing.JButton();
        osgiCmdTF = new javax.swing.JTextField();
        infoLbl1 = new javax.swing.JLabel();
        infoLbl3 = new javax.swing.JLabel();
        responseTimeLbl = new javax.swing.JLabel();
        fireCustomCmd = new javax.swing.JButton();
        responseStatus = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        LHS = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OsgiCmdTree = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        RHS = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        osgiResponseTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        retainOp = new javax.swing.JCheckBox();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        closeTdTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pw/sherlock/resources/icons8-close-window-24.png"))); // NOI18N
        closeTdTab.setToolTipText("Close");
        closeTdTab.setBorderPainted(false);
        closeTdTab.setContentAreaFilled(false);
        closeTdTab.setFocusPainted(false);
        closeTdTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTdTabActionPerformed(evt);
            }
        });

        osgiCmdTF.setText("lec");

        infoLbl1.setText("Loading...");
        infoLbl1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        infoLbl3.setText("OSGi Command:");

        responseTimeLbl.setText("<html><b>Response time: - </b></html>");

        fireCustomCmd.setText("Execute");
        fireCustomCmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireCustomCmdActionPerformed(evt);
            }
        });

        responseStatus.setText("<html><b>Response status: - </b></html>");

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setResizeWeight(0.4);
        jSplitPane1.setToolTipText("");
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        LHS.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("OSGi Commands");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Appnode");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("le");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lec");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("les");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("gc");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("td");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lapi");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lapis");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("las");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lat");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lbwes");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lendpoints");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lmetrics");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lpis");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lr");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("version");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("frwk:appnodeprocessinfo");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("threads");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Application");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("startesc");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("startpsc");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("stopesc");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("stoppsc");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("lap");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Other");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("getprop");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ss");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("imports");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("errors");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("frwk:lloggers");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        OsgiCmdTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        OsgiCmdTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OsgiCmdTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(OsgiCmdTree);

        jLabel2.setText("Available OSGi Commands");

        javax.swing.GroupLayout LHSLayout = new javax.swing.GroupLayout(LHS);
        LHS.setLayout(LHSLayout);
        LHSLayout.setHorizontalGroup(
            LHSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LHSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LHSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addGroup(LHSLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        LHSLayout.setVerticalGroup(
            LHSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LHSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(LHS);

        RHS.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        osgiResponseTextArea.setColumns(20);
        osgiResponseTextArea.setRows(5);
        osgiResponseTextArea.setText("Type in the OSGi command or select from available options and click on 'Execute' button...");
        jScrollPane2.setViewportView(osgiResponseTextArea);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("OSGi Output:");

        retainOp.setText("Retain Output");
        retainOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retainOpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 604, Short.MAX_VALUE)
                .addComponent(retainOp))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addComponent(retainOp))
        );

        javax.swing.GroupLayout RHSLayout = new javax.swing.GroupLayout(RHS);
        RHS.setLayout(RHSLayout);
        RHSLayout.setHorizontalGroup(
            RHSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RHSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RHSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        RHSLayout.setVerticalGroup(
            RHSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RHSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(RHS);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoLbl3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(osgiCmdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fireCustomCmd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(responseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(responseTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoLbl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeTdTab, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeTdTab, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoLbl1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(osgiCmdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(responseTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoLbl3)
                    .addComponent(fireCustomCmd)
                    .addComponent(responseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeTdTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTdTabActionPerformed
		SwingUtilities.getAncestorOfClass(JTabbedPane.class, this).remove(this);
		NodeMon_BasePane.osgiConSwitch.setSelected(false);
    }//GEN-LAST:event_closeTdTabActionPerformed

    private void fireCustomCmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireCustomCmdActionPerformed
		//Clearing out the text area and lables...
		//osgiResponseTextArea.setText("Waiting for response...");
		responseTimeLbl.setText("<html><b>Response time:</b> - </html>");
		responseStatus.setText("<html><b>Response status:</b> - </html>");

		////Random random = new Random();
		//Reference= random.nextInt((max - min) + 1) + min;
		////int sleepInterval = random.nextInt((1500 - 200) + 1) + 200;
		////timer = new Timer(sleepInterval, new ActionListener() {
		////@Override
		////public void actionPerformed(ActionEvent e) {
		sendCustomOsgiRequest();
		////}
		////});
		////timer.start();
    }//GEN-LAST:event_fireCustomCmdActionPerformed

    private void OsgiCmdTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OsgiCmdTreeMouseClicked
		// TODO add your handling code here:
		if (evt.getClickCount() == 2) {
			DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) OsgiCmdTree.getSelectionPath().getLastPathComponent();
			osgiCmdTF.setText(selectedNode.getUserObject().toString());
		}
    }//GEN-LAST:event_OsgiCmdTreeMouseClicked

    private void retainOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retainOpActionPerformed
		// TODO add your handling code here:
		if(retainOp.isSelected()){
		osgiResponseTextArea.append("\n\n");
		}
    }//GEN-LAST:event_retainOpActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LHS;
    private javax.swing.JTree OsgiCmdTree;
    private javax.swing.JPanel RHS;
    private javax.swing.JButton closeTdTab;
    private javax.swing.JButton fireCustomCmd;
    private javax.swing.JLabel infoLbl1;
    private javax.swing.JLabel infoLbl3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField osgiCmdTF;
    private javax.swing.JTextArea osgiResponseTextArea;
    private javax.swing.JLabel responseStatus;
    private javax.swing.JLabel responseTimeLbl;
    private javax.swing.JCheckBox retainOp;
    // End of variables declaration//GEN-END:variables
}
