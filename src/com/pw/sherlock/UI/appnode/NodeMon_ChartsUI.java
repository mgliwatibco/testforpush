/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pw.sherlock.UI.appnode;

import com.pw.sherlock.UI.Home;
import com.pw.sherlock.charts.NodeRecourceMon_IMPL;
import static com.pw.sherlock.UI.Home.master_pollingInterval;
import com.pw.sherlock.utils.SherlockUtils;
import java.awt.Component;
import java.awt.Graphics;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import org.knowm.xchart.XChartPanel;

/**
 *
 * @author pwankhed
 */
public class NodeMon_ChartsUI extends javax.swing.JPanel {

	/**
	 * Creates new form AgentMon_ChartsUI
	 */
	private boolean painted;
	NodeRecourceMon_IMPL nodeObj;
	Component nativeMemChart, heapMemChart, cpuChart, threadChart;
	Timer nodeMonTimer = new Timer();
	NodeMon_BasePane NodeMon_BasePane_Obj;
	SherlockUtils utilsObj = new SherlockUtils();
	
	public NodeMon_ChartsUI(String domainName, String appspaceName, String appnodeName, String httpPort) {
		initComponents();
		NodePortLbl.setVisible(false);
		nodeObj = new NodeRecourceMon_IMPL();
		heapMemChart = new XChartPanel(nodeObj.getNodeHeapMemChart(domainName, appspaceName, appnodeName));
		nativeMemChart = new XChartPanel(nodeObj.getNodeNativeMemChart(domainName, appspaceName, appnodeName));
		cpuChart = new XChartPanel(nodeObj.getNodeCpuChart(domainName, appspaceName, appnodeName));
		threadChart = new XChartPanel(nodeObj.getNodeThreadChart(domainName, appspaceName, appnodeName));

		NodePortLbl.setText(httpPort);

		CpuMemSplitPane.setLeftComponent(cpuChart);
		CpuMemSplitPane.setRightComponent(heapMemChart);

		DialsSplitPane.setLeftComponent(nativeMemChart);
		DialsSplitPane.setRightComponent(threadChart);
		//DialsSplitPane.repaint();
		refreshNodeUtilizationData(domainName, appspaceName, appnodeName);
	}

	private void refreshNodeUtilizationData(String domainName, String appspaceName, String appnodeName) {
		//Get the memory details from BW Agent on nodeMonTimer tick and repaint the chart
		TimerTask updateNodeDetailsTask = new TimerTask() {
			@Override
			public void run() {
				//Get the memory details from BW Agent 
				nodeObj.updateData(domainName, appspaceName, appnodeName);
				nodeResourceInfoLbl.setText(NodeRecourceMon_IMPL.nodeResourceInfoLbl_Source);
				uptimeInfoLbl.setText(NodeRecourceMon_IMPL.nodeResourceUpTime_Source);
				javax.swing.SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						if (cpuChart != null && heapMemChart != null) {
							heapMemChart.repaint();
							nativeMemChart.repaint();
							cpuChart.repaint();
							threadChart.repaint();
							//nodeResourceInfoPane.repaint();
						}
					}
				});
			}
		};

		nodeMonTimer.scheduleAtFixedRate(updateNodeDetailsTask, 0, master_pollingInterval);
	}

	@Override
	public void removeNotify() {
		super.removeNotify();
		nodeMonTimer.cancel();
		nodeMonTimer.purge();
		nodeMonTimer = null;
		nodeObj = null;
		cpuChart = null;
		heapMemChart = null;
		nativeMemChart = null;
		threadChart = null;
	}

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		if (!painted) {
			painted = true;
			CpuMemSplitPane.setDividerLocation(0.50);
			DialsSplitPane.setDividerLocation(0.50);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        baseSplitPane = new javax.swing.JSplitPane();
        CpuMemSplitPane = new javax.swing.JSplitPane();
        DialsSplitPane = new javax.swing.JSplitPane();
        closeNodeMonTab = new javax.swing.JButton();
        nodeThreadDump = new javax.swing.JButton();
        uptimeInfoLbl = new javax.swing.JLabel();
        nodeResourceInfoLbl = new javax.swing.JLabel();
        NodePortLbl = new javax.swing.JLabel();
        performGC = new javax.swing.JButton();

        jScrollPane1.setBorder(null);

        baseSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        baseSplitPane.setLeftComponent(CpuMemSplitPane);
        baseSplitPane.setBottomComponent(DialsSplitPane);

        jScrollPane1.setViewportView(baseSplitPane);

        closeNodeMonTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pw/sherlock/resources/icons8-close-window-24.png"))); // NOI18N
        closeNodeMonTab.setToolTipText("Close");
        closeNodeMonTab.setBorderPainted(false);
        closeNodeMonTab.setContentAreaFilled(false);
        closeNodeMonTab.setFocusPainted(false);
        closeNodeMonTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeNodeMonTabActionPerformed(evt);
            }
        });

        nodeThreadDump.setText("Thread dump");
        nodeThreadDump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeThreadDumpActionPerformed(evt);
            }
        });

        uptimeInfoLbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        uptimeInfoLbl.setText("Uptime:");

        nodeResourceInfoLbl.setText("Loading...");

        NodePortLbl.setText("appnodePort");

        performGC.setText("Perform GC");
        performGC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performGCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nodeResourceInfoLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NodePortLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(uptimeInfoLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nodeThreadDump)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(performGC, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeNodeMonTab, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeNodeMonTab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nodeThreadDump)
                        .addComponent(uptimeInfoLbl)
                        .addComponent(nodeResourceInfoLbl)
                        .addComponent(NodePortLbl)
                        .addComponent(performGC)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nodeThreadDumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeThreadDumpActionPerformed
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				addThreadDumpTab();
			}
		});
    }//GEN-LAST:event_nodeThreadDumpActionPerformed

	private void addThreadDumpTab() {
		try {
			NodeMon_BasePane_Obj = new NodeMon_BasePane();
			SimpleDateFormat dateFormatter = new SimpleDateFormat("HH:mm:ss");
			Date date = new Date();
			String currState = nodeResourceInfoLbl.getText() + ". " + uptimeInfoLbl.getText();

			currState = currState.replace("</b>", "");
			currState = currState.replace("<b>", "");
			currState = currState.replace("<html>", "");
			currState = currState.replace("</html>", "");

			Component NodeMon_ThreadDumpUI = new NodeMon_ThreadDumpUI(Home.master_agentHostName, NodePortLbl.getText(), currState);
			//JPanel tdObj = new NodeMon_ThreadDumpUI(Home.master_agentHostName, NodePortLbl.getText(), currState);
			Icon nodeIcon = new javax.swing.ImageIcon(getClass().getResource("/com/pw/sherlock/resources/thread-dump-24.png"));

			//Swing utilities way - Working
			JTabbedPane nodeMonBasePaneObj = (JTabbedPane) SwingUtilities.getAncestorOfClass(JTabbedPane.class, this);
			nodeMonBasePaneObj.addTab("Thread dump (" + dateFormatter.format(date) + ")", nodeIcon, NodeMon_ThreadDumpUI);
			nodeMonBasePaneObj.setSelectedComponent(NodeMon_ThreadDumpUI);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

    private void closeNodeMonTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeNodeMonTabActionPerformed
		try {
			int dialogResult = JOptionPane.showConfirmDialog(null, "Closing this tab and reopening it later will not show the historic monitoring"
					+ " statistics. Are you sure you want to close this tab?", "Warning", JOptionPane.YES_NO_CANCEL_OPTION);
			if (dialogResult == JOptionPane.YES_OPTION) {
				SwingUtilities.getAncestorOfClass(JTabbedPane.class, this).remove(this);
				
				//NodeMon_BasePane.nodeMonSwitch.setSelected(false);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
    }//GEN-LAST:event_closeNodeMonTabActionPerformed

    private void performGCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performGCActionPerformed
		// TODO add your handling code here:
		try {
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					String url = "http://" + Home.master_agentHostName.trim() + ":" + NodePortLbl.getText().trim() + "/bw/framework.json/osgi?command=gc";
					String gcResult = utilsObj.processSimpleHttpRequest(url, "PerformGC");
					gcResult = gcResult.replace("Free", "\nFree");
					gcResult = gcResult.replace("Memory gained", "\nMemory gained");
					//int toMBs = 1024 * 1024;
					JOptionPane.showMessageDialog(null, "Garbage collection activity was successful, below are the memory details (in bytes):\n\n" + gcResult,
					"Garbage collection", JOptionPane.INFORMATION_MESSAGE);
				}
			});
		}catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null,"Error occured while performing the requested action, please check logs for more details.","GC Failed", JOptionPane.ERROR);
		}
    }//GEN-LAST:event_performGCActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JSplitPane CpuMemSplitPane;
    public static javax.swing.JSplitPane DialsSplitPane;
    private javax.swing.JLabel NodePortLbl;
    private javax.swing.JSplitPane baseSplitPane;
    private javax.swing.JButton closeNodeMonTab;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nodeResourceInfoLbl;
    private javax.swing.JButton nodeThreadDump;
    private javax.swing.JButton performGC;
    private javax.swing.JLabel uptimeInfoLbl;
    // End of variables declaration//GEN-END:variables
}
