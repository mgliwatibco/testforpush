/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pw.sherlock.UI.agent;

import com.pw.sherlock.UI.agent.AgentMon_BasePane;
import com.pw.sherlock.OshiImpls.OshiMiscFuncs;
import com.pw.sherlock.UI.Home;
import com.pw.sherlock.utils.SherlockUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.Duration;
import java.time.Instant;
import java.util.Random;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.text.DefaultCaret;
import org.apache.log4j.Logger;
import org.json.JSONObject;

/**
 *
 * @author pwankhed
 */
public class AgentMon_HealthCheckup extends javax.swing.JPanel {

	OshiMiscFuncs oshiObj;
	private final Logger AgentMonHealthCheckTab = Logger.getLogger(AgentMon_HealthCheckup.class);
	SherlockUtils utilsObj = new SherlockUtils();
	Instant start, end;
	long responseTime;
	Timer timer;

	public AgentMon_HealthCheckup() {
		initComponents();
		try {
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					//jsonResponseTextArea.setEditable(false);
					infoLbl1.setText("<html>BW Agent communication primarily takes place via REST calls. As a part of this healthcheck, Sherlock will send a HTTP request to BW Agent over HTTP 'PUT' "
							+ "method with specific task ID. If the request is successfull, '200 OK' response code will be returned. Lesser the response"
							+ " time, faster the BW Agent.<br/><br/>Provide the task ID below and sherlock will send the healthcheck request to BW Agent. Upon execution of the request, the response, response "
							+ "time and responde code will be displayed.<br/></html>");
					infoLbl1.setSize(infoLbl1.getPreferredSize());
				}
			});
		} catch (Exception ex) {
			AgentMonHealthCheckTab.error("Exception occured while reading the f requested by ' AgentMon_FileContentsTab()"
					+ "'. Exception details are: " + ex.getMessage());
		}
	}
	
	private void sendHealthCheckRequest() {
		try {
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					start = Instant.now();
					String url = "http://" + Home.master_agentHostName.trim() + ":" + Home.master_teaAgentPort.trim() + "/bwta/task/" + taskId.getText().trim();
					String messageBody = "{\"principal\":\"admin\",\"operationName\":\"getAllAgents\",\"sessionId\":\"mytestsessionid\""
							+ ",\"samlToken\":\"\",\"methodType\":\"READ\",\"showStatus\":false,\"objectType\":\"BusinessWorks\",\"key\""
							+ ":\"BusinessWorks\"}";
					String[] healthResponse = utilsObj.processComplexHttpRequest(url);
					end = Instant.now();
					responseStatus.setText(healthResponse[0]);
					JSONObject json = new JSONObject(healthResponse[1]);
					
					DefaultCaret caret = (DefaultCaret) jsonResponseTextArea.getCaret();
					caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
					jsonResponseTextArea.getCaret().setVisible(true);
					jsonResponseTextArea.getCaret().setSelectionVisible(true);
					jsonResponseTextArea.setText(json.toString(4));
					
					responseTime = Duration.between(start, end).toMillis();
					responseTimeLbl.setText("<html><b>Response time:</b> " + responseTime + " ms.</html>");
					timer.stop();
				}
			});

		} catch (Exception ex) {
			AgentMonHealthCheckTab.error("Exception occured while processing 'sendHealthCheckRequest'"
					+ "'. Exception details are: " + ex.getMessage());
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeTdTab = new javax.swing.JButton();
        tdScrollPane = new javax.swing.JScrollPane();
        jsonResponseTextArea = new javax.swing.JTextArea();
        taskId = new javax.swing.JTextField();
        infoLbl1 = new javax.swing.JLabel();
        infoLbl3 = new javax.swing.JLabel();
        responseTimeLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        checkAgentHealth = new javax.swing.JButton();
        responseStatus = new javax.swing.JLabel();

        closeTdTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/pw/sherlock/resources/icons8-close-window-24.png"))); // NOI18N
        closeTdTab.setToolTipText("Close");
        closeTdTab.setBorderPainted(false);
        closeTdTab.setContentAreaFilled(false);
        closeTdTab.setFocusPainted(false);
        closeTdTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTdTabActionPerformed(evt);
            }
        });

        jsonResponseTextArea.setColumns(20);
        jsonResponseTextArea.setLineWrap(true);
        jsonResponseTextArea.setRows(5);
        jsonResponseTextArea.setText("Press 'Send' button to send healthcheck request...");
        jsonResponseTextArea.setWrapStyleWord(true);
        jsonResponseTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        tdScrollPane.setViewportView(jsonResponseTextArea);

        taskId.setText("AgentHealthCheckTask");

        infoLbl1.setText("Loading...");
        infoLbl1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        infoLbl3.setText("Task ID:");

        responseTimeLbl.setText("<html><b>Response time: - </b></html>");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel1.setText("BW Agent healthcheck");

        checkAgentHealth.setText("Send");
        checkAgentHealth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAgentHealthActionPerformed(evt);
            }
        });

        responseStatus.setText("<html><b>Response status: - </b></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tdScrollPane)
                    .addComponent(infoLbl1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeTdTab, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(infoLbl3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskId, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkAgentHealth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 344, Short.MAX_VALUE)
                        .addComponent(responseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(responseTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeTdTab, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(10, 10, 10)
                .addComponent(infoLbl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(responseTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoLbl3)
                    .addComponent(checkAgentHealth)
                    .addComponent(responseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tdScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeTdTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTdTabActionPerformed
		SwingUtilities.getAncestorOfClass(JTabbedPane.class, this).remove(this);
		AgentMon_BasePane.agentHealthcheckSwitch.setSelected(false);
    }//GEN-LAST:event_closeTdTabActionPerformed

    private void checkAgentHealthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAgentHealthActionPerformed
		//Clearing out the text area and lables...
		jsonResponseTextArea.setText("Waiting for response...");
		responseTimeLbl.setText("<html><b>Response time:</b> - </html>");
		responseStatus.setText("<html><b>Response status:</b> - </html>");
				
		Random random = new Random();
		//Reference= random.nextInt((max - min) + 1) + min;
		int sleepInterval = random.nextInt((1500 - 200) + 1) + 200;
		
		timer = new Timer(sleepInterval, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				sendHealthCheckRequest();
			}
		});
		timer.start();
    }//GEN-LAST:event_checkAgentHealthActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkAgentHealth;
    private javax.swing.JButton closeTdTab;
    private javax.swing.JLabel infoLbl1;
    private javax.swing.JLabel infoLbl3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea jsonResponseTextArea;
    private javax.swing.JLabel responseStatus;
    private javax.swing.JLabel responseTimeLbl;
    private javax.swing.JTextField taskId;
    private javax.swing.JScrollPane tdScrollPane;
    // End of variables declaration//GEN-END:variables
}
